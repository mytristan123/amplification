/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Picture as PrismaPicture,
  MemberProfile as PrismaMemberProfile,
} from "@prisma/client";

export class PictureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PictureCountArgs, "select">): Promise<number> {
    return this.prisma.picture.count(args);
  }

  async pictures(args: Prisma.PictureFindManyArgs): Promise<PrismaPicture[]> {
    return this.prisma.picture.findMany(args);
  }
  async picture(
    args: Prisma.PictureFindUniqueArgs
  ): Promise<PrismaPicture | null> {
    return this.prisma.picture.findUnique(args);
  }
  async createPicture(args: Prisma.PictureCreateArgs): Promise<PrismaPicture> {
    return this.prisma.picture.create(args);
  }
  async updatePicture(args: Prisma.PictureUpdateArgs): Promise<PrismaPicture> {
    return this.prisma.picture.update(args);
  }
  async deletePicture(args: Prisma.PictureDeleteArgs): Promise<PrismaPicture> {
    return this.prisma.picture.delete(args);
  }

  async getMemberProfile(
    parentId: string
  ): Promise<PrismaMemberProfile | null> {
    return this.prisma.picture
      .findUnique({
        where: { id: parentId },
      })
      .memberProfile();
  }
}
