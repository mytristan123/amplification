/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Picture } from "./Picture";
import { PictureCountArgs } from "./PictureCountArgs";
import { PictureFindManyArgs } from "./PictureFindManyArgs";
import { PictureFindUniqueArgs } from "./PictureFindUniqueArgs";
import { CreatePictureArgs } from "./CreatePictureArgs";
import { UpdatePictureArgs } from "./UpdatePictureArgs";
import { DeletePictureArgs } from "./DeletePictureArgs";
import { MemberProfile } from "../../memberProfile/base/MemberProfile";
import { PictureService } from "../picture.service";
@graphql.Resolver(() => Picture)
export class PictureResolverBase {
  constructor(protected readonly service: PictureService) {}

  async _picturesMeta(
    @graphql.Args() args: PictureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Picture])
  async pictures(
    @graphql.Args() args: PictureFindManyArgs
  ): Promise<Picture[]> {
    return this.service.pictures(args);
  }

  @graphql.Query(() => Picture, { nullable: true })
  async picture(
    @graphql.Args() args: PictureFindUniqueArgs
  ): Promise<Picture | null> {
    const result = await this.service.picture(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Picture)
  async createPicture(
    @graphql.Args() args: CreatePictureArgs
  ): Promise<Picture> {
    return await this.service.createPicture({
      ...args,
      data: {
        ...args.data,

        memberProfile: args.data.memberProfile
          ? {
              connect: args.data.memberProfile,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Picture)
  async updatePicture(
    @graphql.Args() args: UpdatePictureArgs
  ): Promise<Picture | null> {
    try {
      return await this.service.updatePicture({
        ...args,
        data: {
          ...args.data,

          memberProfile: args.data.memberProfile
            ? {
                connect: args.data.memberProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Picture)
  async deletePicture(
    @graphql.Args() args: DeletePictureArgs
  ): Promise<Picture | null> {
    try {
      return await this.service.deletePicture(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => MemberProfile, {
    nullable: true,
    name: "memberProfile",
  })
  async getMemberProfile(
    @graphql.Parent() parent: Picture
  ): Promise<MemberProfile | null> {
    const result = await this.service.getMemberProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
