/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MemberProfile as PrismaMemberProfile,
  Picture as PrismaPicture,
  User as PrismaUser,
} from "@prisma/client";

export class MemberProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MemberProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.memberProfile.count(args);
  }

  async memberProfiles(
    args: Prisma.MemberProfileFindManyArgs
  ): Promise<PrismaMemberProfile[]> {
    return this.prisma.memberProfile.findMany(args);
  }
  async memberProfile(
    args: Prisma.MemberProfileFindUniqueArgs
  ): Promise<PrismaMemberProfile | null> {
    return this.prisma.memberProfile.findUnique(args);
  }
  async createMemberProfile(
    args: Prisma.MemberProfileCreateArgs
  ): Promise<PrismaMemberProfile> {
    return this.prisma.memberProfile.create(args);
  }
  async updateMemberProfile(
    args: Prisma.MemberProfileUpdateArgs
  ): Promise<PrismaMemberProfile> {
    return this.prisma.memberProfile.update(args);
  }
  async deleteMemberProfile(
    args: Prisma.MemberProfileDeleteArgs
  ): Promise<PrismaMemberProfile> {
    return this.prisma.memberProfile.delete(args);
  }

  async findPictures(
    parentId: string,
    args: Prisma.PictureFindManyArgs
  ): Promise<PrismaPicture[]> {
    return this.prisma.memberProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pictures(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.memberProfile
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
