/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MemberProfileService } from "../memberProfile.service";
import { MemberProfileCreateInput } from "./MemberProfileCreateInput";
import { MemberProfile } from "./MemberProfile";
import { MemberProfileFindManyArgs } from "./MemberProfileFindManyArgs";
import { MemberProfileWhereUniqueInput } from "./MemberProfileWhereUniqueInput";
import { MemberProfileUpdateInput } from "./MemberProfileUpdateInput";
import { PictureFindManyArgs } from "../../picture/base/PictureFindManyArgs";
import { Picture } from "../../picture/base/Picture";
import { PictureWhereUniqueInput } from "../../picture/base/PictureWhereUniqueInput";

export class MemberProfileControllerBase {
  constructor(protected readonly service: MemberProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MemberProfile })
  async createMemberProfile(
    @common.Body() data: MemberProfileCreateInput
  ): Promise<MemberProfile> {
    return await this.service.createMemberProfile({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        age: true,
        biography: true,
        createdAt: true,
        dateOfBirth: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MemberProfile] })
  @ApiNestedQuery(MemberProfileFindManyArgs)
  async memberProfiles(
    @common.Req() request: Request
  ): Promise<MemberProfile[]> {
    const args = plainToClass(MemberProfileFindManyArgs, request.query);
    return this.service.memberProfiles({
      ...args,
      select: {
        age: true,
        biography: true,
        createdAt: true,
        dateOfBirth: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MemberProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async memberProfile(
    @common.Param() params: MemberProfileWhereUniqueInput
  ): Promise<MemberProfile | null> {
    const result = await this.service.memberProfile({
      where: params,
      select: {
        age: true,
        biography: true,
        createdAt: true,
        dateOfBirth: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MemberProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMemberProfile(
    @common.Param() params: MemberProfileWhereUniqueInput,
    @common.Body() data: MemberProfileUpdateInput
  ): Promise<MemberProfile | null> {
    try {
      return await this.service.updateMemberProfile({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          age: true,
          biography: true,
          createdAt: true,
          dateOfBirth: true,
          id: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MemberProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMemberProfile(
    @common.Param() params: MemberProfileWhereUniqueInput
  ): Promise<MemberProfile | null> {
    try {
      return await this.service.deleteMemberProfile({
        where: params,
        select: {
          age: true,
          biography: true,
          createdAt: true,
          dateOfBirth: true,
          id: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pictures")
  @ApiNestedQuery(PictureFindManyArgs)
  async findPictures(
    @common.Req() request: Request,
    @common.Param() params: MemberProfileWhereUniqueInput
  ): Promise<Picture[]> {
    const query = plainToClass(PictureFindManyArgs, request.query);
    const results = await this.service.findPictures(params.id, {
      ...query,
      select: {
        caption: true,
        createdAt: true,
        id: true,

        memberProfile: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pictures")
  async connectPictures(
    @common.Param() params: MemberProfileWhereUniqueInput,
    @common.Body() body: PictureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pictures: {
        connect: body,
      },
    };
    await this.service.updateMemberProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pictures")
  async updatePictures(
    @common.Param() params: MemberProfileWhereUniqueInput,
    @common.Body() body: PictureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pictures: {
        set: body,
      },
    };
    await this.service.updateMemberProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pictures")
  async disconnectPictures(
    @common.Param() params: MemberProfileWhereUniqueInput,
    @common.Body() body: PictureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pictures: {
        disconnect: body,
      },
    };
    await this.service.updateMemberProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
